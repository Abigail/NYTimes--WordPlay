#!/opt/perl/bin/perl

use 5.016;

use strict;
use warnings;
no  warnings 'syntax';

use feature 'current_sub';

#
# You're creating a new coin system for your country. You must use
# only three coin values and you must be able to create the values 1
# through 10 using one coin at a minimum and two coins maximum, including
# a possible coin given back.
#
# After you create a successful coin system for your country, the
# neighboring countries ask you to do the same for them, but to please
# not repeat the same coin system for any of them.
# 
# What are the other unique coin systems that you can create?
# 
# For how many countries can you create a unique coin system with three coins?
# 


my $MAX_VALUE    = 10;
my $NR_OF_VALUES =  3;


#
# Given a size, and a set, return all subsets of said size.
#
sub all_subsets {
    my ($size, @set) = @_;

    return if $size <= 0;
    return if @set  < $size;
    return map {[$_]} @set if $size == 1;

    my $first = shift @set;

    return map ({[$first, @$_]} &{+__SUB__} ($size - 1, @set)),
                                &{+__SUB__} ($size,     @set);
}

#
# Return all the possible sums of a given set, with the possibility
# of a return coin.
#
sub all_sums {
    my @set = @_;

    return (0) if !@set;
    return (-$set [0], 0, $set [0]) if @set == 1;

    my $first = shift @set;
    my @sums  = map {($_ - $first, $_, $_ + $first)} __SUB__ -> (@set);

    my %seen  = map {$_ => 1} @sums;

    keys %seen;
}

#
# All possible sets of $NR_OF_VALUE different coins, valued between
# 1 and $MAX_VALUE, inclusive.
#
my @sets = all_subsets $NR_OF_VALUES, 1 .. $MAX_VALUE;

#
# Find the sets where 1 to 10 can be made with at most 2 coins.
#
foreach my $set (@sets) {
    my @sums = sort {$a <=> $b}
               grep {$_ > 0} all_sums (@$set);
    # Since the sums are ordered, just look for set with at least $MAX_VALUE
    # different sums, of which the $MAX_VALUEth sum equals $MAX_VALUE.
    if (@sums >= $MAX_VALUE && $sums [$MAX_VALUE - 1] == $MAX_VALUE) {
      # say "@$set -> @sums";
        local $" = ", ";
        say "@$set";
    }
}


__END__
